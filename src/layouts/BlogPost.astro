---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import Layout from "../layouts/Base.astro";
import H1 from "../components/H1.astro";
import Link from "../components/Link.astro";
import { SITE_TITLE } from "../consts";
import { Image } from "astro:assets";

type Props = CollectionEntry<"blog" | "projects">["data"];

const title = Astro.props.title;
const description = Astro.props.description ?? "";
const pubDate = (Astro.props as any).pubDate ?? (Astro.props as any).date;
const updatedDate = (Astro.props as any).updatedDate;
const heroImage = (Astro.props as any).heroImage;
const github = (Astro.props as any).github;
const link = (Astro.props as any).link;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/*.{jpeg,jpg,png,gif,webp,svg}",
  { eager: true }
);

function getImageByName(imageName: string) {
  if (!imageName) return null;

  const possiblePaths = [
    `/src/assets/${imageName}`,
    `/src/assets/images/${imageName}`,
    `/src/assets/projects/${imageName}`,
  ];

  for (const path of possiblePaths) {
    if (images[path]) {
      return images[path].default;
    }
  }

  return null;
}

const matchedImage = heroImage ? getImageByName(heroImage) : null;
---

<Layout title={`${SITE_TITLE} | ${title}`} description={description}>
  <article class="my-16">
    <div class="title space-y-4">
      <H1>{title}</H1>

      <p class="text-stone-700 dark:text-stone-400 italic text-md">
        {description}
      </p>
      <div class="flex gap-2">
        {
          github && (
            <Link
              href={github}
              iconClass="ph-fill ph-github-logo"
              text="GitHub"
              ariaLabel="View on GitHub"
            />
          )
        }
        {
          link && (
            <Link
              href={link}
              iconClass="ph-fill ph-arrow-square-out "
              text="Demo"
              ariaLabel="View live demo"
            />
          )
        }
      </div>
      {
        pubDate && (
          <div class="date my-4">
            <FormattedDate
              date={pubDate}
              className="text-stone-700 dark:text-stone-400 text-sm font-light"
            />
            {updatedDate && (
              <div class="last-updated-on">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )}
          </div>
        )
      }

      <hr class="text-stone-300 dark:text-stone-700" />
    </div>

    <div
      class="prose prose-stone prose-h1:text-green-400 prose-headings:text-stone-700 prose-p:text-stone-600 prose-a:no-underline prose-a:text-green-400 prose-a:hover:underline dark:prose-invert dark:prose-h1:text-green-400 dark:prose-headings:text-stone-300 dark:prose-p:text-stone-300/80 dark:prose-a:text-green-400 dark:prose-a:hover:underline">
      {
        matchedImage && (
          <div class="hero-image">
            <Image
              class="image-transition"
              src={matchedImage}
              alt={`Hero image for ${title}`}
              width={1000}
              height={500}
              format="webp"
            />
          </div>
        )
      }
      <slot />
    </div>
  </article>
</Layout>
